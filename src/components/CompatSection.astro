---
import ExperimentalInline from './ExperimentalInline.astro';

const PLATFORMS = [
  {
    id: 'bundler',
    name: 'Bundlers',
    children: [
      {
        id: 'esbuild',
        name: 'esbuild',
      },
      {
        id: 'rsbuild',
        name: 'Rsbuild',
      },
      {
        id: 'rspack',
        name: 'Rspack',
      },
      {
        id: 'vite',
        name: 'Vite',
      },
      {
        id: 'webpack',
        name: 'Webpack',
      },
    ],
  },
  {
    id: 'runtime',
    name: 'Runtimes',
    children: [
      {
        id: 'bun',
        name: 'Bun',
      },
      {
        id: 'deno',
        name: 'Deno',
      },
      {
        id: 'nodejs',
        name: 'Node.js',
      },
    ],
  },
];

interface SupportStatement {
  version_added: string | boolean | null;
  notes?: string | string[];
}

interface CompatEntry {
  level: number;
  description: string;
  support: {
    [name: string]: SupportStatement;
  };
  status: {
    experimental: boolean;
    standard_track: boolean;
    deprecated: boolean;
  };
}

function collectCompat(feature: object, level: number): CompatEntry[] {
  const result: CompatEntry[] = [];

  for (const [key, value] of Object.entries(feature)) {
    if (key === '__compat') {
      result.push({ ...value, level });
    } else {
      result.push(...collectCompat(value as object, level + 1));
    }
  }

  return result;
}

function formatVersionAdded(support: SupportStatement): string | null {
  if (!support.version_added) {
    return 'No';
  }
  if (support.version_added === true) {
    return 'Yes';
  }
  const pretty = support.version_added.replace(/(?:\.0)+$/, '');
  return pretty;
}

const compats = collectCompat(Astro.props.feature, 0);
---

<style>
  table {
    --color-table-border: #cdcdcd;
    --text-primary-red: #d30038;
    --text-primary-green: #007936;

    border-collapse: initial;
    border-spacing: 0;
    border: 1px solid var(--color-table-border);
    width: 100%;
  }

  th {
    text-align: center;
    vertical-align: bottom;
    padding: 0.25rem;

    font-weight: 500;
    font-size: var(--type-smaller-font-size);
  }

  td,
  th {
    border: 1px solid var(--color-table-border);
    border-top-width: 0;
    border-right-width: 0;

    font-weight: 500;
  }

  thead > tr > td {
    border-width: 0;
    border-bottom-width: 1px;
  }

  tbody > tr > th {
    vertical-align: middle;
    border-left-width: 0;

    &.feature-desc {
      text-align: left;

      &.feature-level-2 {
        border-left-width: 8px;
      }

      &.feature-level-3 {
        border-left-width: 16px;
      }

      &.feature-level-4 {
        border-left-width: 24px;
      }

      &.feature-level-5 {
        border-left-width: 32px;
      }
    }
  }

  tbody > tr:last-child {
    & > th,
    & > td {
      border-bottom-width: 0;
    }
  }

  td {
    text-align: center;
    padding: 0;
  }

  td > button {
    padding: 0.5rem 0.25rem;
    display: flex;
    align-items: center;
    flex-direction: column;
    border: none;
    background-color: transparent;
    gap: 0.5rem;
    box-sizing: border-box;
    width: 100%;
    cursor: pointer;
    font-weight: inherit;

    &:hover {
      background-color: #eee;
    }
  }

  .platform-name-label {
    writing-mode: vertical-rl;
    transform: rotate(180deg);
    left: calc(50% - 0.5rem);
    line-height: 1;
    padding-inline: 0.5rem;
    position: relative;
  }

  .support-supported {
    color: var(--text-primary-green);
  }

  .support-supported > .icon.icon-support::after {
    mask-image: var(--icon-check);
  }

  .support-unsupported {
    color: var(--text-primary-red);
  }

  .support-unsupported > .icon.icon-support::after {
    mask-image: var(--icon-x);
    background-color: var(--text-primary-red);
  }

  .status-experimental::after {
    mask-image: var(--icon-experimental);
  }

  .icon.icon-notes::after {
    mask-image: var(--icon-asterisk);
  }
</style>
<h2>Bundler compatibility</h2>
<table>
  <thead>
    <tr>
      <td rowspan="2"></td>
      {PLATFORMS.map((p) => <th colspan={p.children.length}>{p.name}</th>)}
    </tr>
    <tr>
      {
        PLATFORMS.flatMap((p) =>
          p.children.map((pc) => (
            <th>
              <div class="platform-name-label">{pc.name}</div>
            </th>
          )),
        )
      }
    </tr>
  </thead>
  <tbody>
    {
      compats.map((compat) => {
        return (
          <tr>
            <th class:list={['feature-desc', `feature-level-${compat.level}`]}>
              <span set:html={compat.description} />
              {compat.status.experimental && <ExperimentalInline />}
            </th>
            {PLATFORMS.flatMap((p) =>
              p.children.map((pc) => {
                let support = compat.support[pc.id] || {
                  version_added: null,
                };
                if (Array.isArray(support)) {
                  support = support[0];
                }
                const prettyVersion = formatVersionAdded(support);

                return (
                  <td>
                    <button
                      class:list={[
                        support.version_added
                          ? 'support-supported'
                          : 'support-unsupported',
                      ]}
                    >
                      <abbr
                        class="icon icon-support"
                        title={
                          support.version_added ? 'Full support' : 'No Support'
                        }
                      />
                      <div class="version-added">{prettyVersion}</div>
                      {support.notes?.length && (
                        <abbr
                          class="icon icon-notes"
                          title="See implementation notes."
                        />
                      )}
                    </button>
                  </td>
                );
              }),
            )}
          </tr>
        );
      })
    }
  </tbody>
</table>
