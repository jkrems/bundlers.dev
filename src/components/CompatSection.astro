---
import { CompatTable, type PlatformType } from './CompatTable.tsx';

const PLATFORMS: PlatformType[] = [
  {
    id: 'bundler',
    name: 'Bundlers',
    children: [
      {
        id: 'esbuild',
        name: 'esbuild',
      },
      {
        id: 'rsbuild',
        name: 'Rsbuild',
      },
      {
        id: 'rspack',
        name: 'Rspack',
      },
      {
        id: 'vite',
        name: 'Vite',
      },
      {
        id: 'webpack',
        name: 'Webpack',
      },
    ],
  },
  {
    id: 'runtime',
    name: 'Runtimes',
    children: [
      {
        id: 'bun',
        name: 'Bun',
      },
      {
        id: 'deno',
        name: 'Deno',
      },
      {
        id: 'nodejs',
        name: 'Node.js',
      },
    ],
  },
];

interface SupportStatement {
  version_added: string | boolean | null;
  notes?: string | string[];
}

interface CompatEntry {
  level: number;
  description: string;
  support: {
    [name: string]: SupportStatement;
  };
  status: {
    experimental: boolean;
    standard_track: boolean;
    deprecated: boolean;
  };
}

function collectCompat(feature: object, level: number): CompatEntry[] {
  const result: CompatEntry[] = [];

  for (const [key, value] of Object.entries(feature)) {
    if (key === '__compat') {
      result.push({ ...value, level });
    } else {
      result.push(...collectCompat(value as object, level + 1));
    }
  }

  return result;
}

function formatVersionAdded(support: SupportStatement): string | null {
  if (!support.version_added) {
    return 'No';
  }
  if (support.version_added === true) {
    return 'Yes';
  }
  const pretty = support.version_added.replace(/(?:\.0)+$/, '');
  return pretty;
}

const compats = collectCompat(Astro.props.feature, 0);
---

<h2>Bundler compatibility</h2>
<CompatTable platforms={PLATFORMS} compats={compats} client:idle />
