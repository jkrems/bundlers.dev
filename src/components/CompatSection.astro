---
import { CompatTable, type PlatformGroup } from './CompatTable.tsx';
import {
  isCompatNode,
  PLATFORMS,
  PLATFORM_TYPES,
  type CompatJson,
  type Compat,
} from '../../scripts/compat-runner/compat_data_schema.ts';

const PLATFORM_GROUPS: PlatformGroup[] = Object.values(PLATFORM_TYPES).map(
  (pt) => ({
    ...pt,
    children: Object.values(PLATFORMS).filter((p) => p.type === pt.id),
  }),
);

interface CompatEntry extends Compat {
  level: number;
}

function collectCompat(feature: CompatJson, level: number): CompatEntry[] {
  const result: CompatEntry[] = [];

  if (isCompatNode(feature)) {
    result.push({ ...feature.__compat, level });
  }

  for (const [key, value] of Object.entries(feature)) {
    if (key !== '__compat' && !!value) {
      result.push(...collectCompat(value, level + 1));
    }
  }

  return result;
}

const compats = collectCompat(Astro.props.feature, 0);
---

<h2>Bundler compatibility</h2>
<CompatTable platforms={PLATFORM_GROUPS} compats={compats} client:idle />
